# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ufD4atIud4Vr2TAtZrrBR8oMGnbRBYJJ
"""

import numpy as np
import matplotlib.pyplot as plt

def plot_cities(coordinates, title):
    plt.figure(figsize=(6, 6))
    plt.scatter(coordinates[:, 0], coordinates[:, 1], c='blue', edgecolor='k', s=50)
    plt.title(title)
    plt.xlabel('X Coordinate')
    plt.ylabel('Y Coordinate')
    plt.grid(True)
    for i, (x, y) in enumerate(coordinates):
        plt.text(x, y, f' {i}', color='red', fontsize=12)
    plt.show()

# Random distribution
np.random.seed(0)
random_cities = np.random.rand(10, 2) * 100

# Clustered distribution
cluster_center = np.array([50, 50])
clustered_cities = cluster_center + np.random.randn(10, 2) * 10

# Line distribution
line_cities = np.array([(x, 50) for x in np.linspace(10, 90, 10)])

# Circle distribution
theta = np.linspace(0, 2 * np.pi, 10, endpoint=False)
circle_cities = np.column_stack((50 + 40 * np.cos(theta), 50 + 40 * np.sin(theta)))

# Grid distribution
x = np.linspace(10, 90, 5)
y = np.linspace(10, 90, 2)
grid_x, grid_y = np.meshgrid(x, y)
grid_cities = np.column_stack((grid_x.ravel(), grid_y.ravel()))

# Plotting
plot_cities(random_cities, "Random Distribution")
plot_cities(clustered_cities, "Clustered Distribution")
plot_cities(line_cities, "Line Distribution")
plot_cities(circle_cities, "Circle Distribution")
plot_cities(grid_cities, "Grid Distribution")

import numpy as np
import matplotlib.pyplot as plt

def plot_cities(coordinates, title, ax):
    ax.scatter(coordinates[:, 0], coordinates[:, 1], c='blue', edgecolor='k', s=50)
    ax.set_title(title)
    ax.set_xlabel('X Coordinate')
    ax.set_ylabel('Y Coordinate')
    ax.grid(True)
    for i, (x, y) in enumerate(coordinates):
        ax.text(x, y, f' {i}', color='red', fontsize=9)

# Create the figure and axes objects
fig, axs = plt.subplots(2, 3, figsize=(15, 10))  # 2 rows, 3 columns
fig.suptitle('Different City Distributions for TSP')

# Generate city coordinates
np.random.seed(0)
random_cities = np.random.rand(10, 2) * 100
cluster_center = np.array([50, 50])
clustered_cities = cluster_center + np.random.randn(10, 2) * 10
line_cities = np.array([(x, 50) for x in np.linspace(10, 90, 10)])
theta = np.linspace(0, 2 * np.pi, 10, endpoint=False)
circle_cities = np.column_stack((50 + 40 * np.cos(theta), 50 + 40 * np.sin(theta)))
x = np.linspace(10, 90, 5)
y = np.linspace(10, 90, 2)
grid_x, grid_y = np.meshgrid(x, y)
grid_cities = np.column_stack((grid_x.ravel(), grid_y.ravel()))

# Plot each distribution on its respective subplot
plot_cities(random_cities, "Random Distribution", axs[0, 0])
plot_cities(clustered_cities, "Clustered Distribution", axs[0, 1])
plot_cities(line_cities, "Line Distribution", axs[0, 2])
plot_cities(circle_cities, "Circle Distribution", axs[1, 0])
plot_cities(grid_cities, "Grid Distribution", axs[1, 1])

# Hide the last empty subplot (if any)
for ax in axs.flat:
    ax.label_outer()  # Only show outer labels to avoid redundancy

# Hide the last subplot if it's unused
if axs.size > 5:
    fig.delaxes(axs[1, 2])

# Adjust layout and save the figure
plt.tight_layout(rect=[0, 0.03, 1, 0.95])  # Adjust the rect to fit the suptitle
plt.savefig('TSP_City_Distributions.png')  # Save the figure
plt.show()