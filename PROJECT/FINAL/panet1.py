# -*- coding: utf-8 -*-
"""Panet1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wRZVuTaw_Qe4lkzSWo1f98aCLPu4uH_T
"""

import networkx as nx
import matplotlib.pyplot as plt
from itertools import permutations

G = nx.Graph()
G.add_edge('Depot', 'A', weight=5, time=10)
G.add_edge('Depot', 'B', weight=10, time=12)
G.add_edge('Depot', 'C', weight=15, time=16)
G.add_edge('A', 'D', weight=8, time=16)
G.add_edge('A', 'B', weight=1, time=12)
G.add_edge('B', 'D', weight=11, time=12)
G.add_edge('C', 'D', weight=30, time=2)
G.add_edge('A', 'E', weight=30, time=9)
G.add_edge('B', 'E', weight=6, time=10)
G.add_edge('B', 'C', weight=30, time=9)
G.add_edge('C', 'E', weight=6, time=10)


destinations = ['A', 'B', 'C', 'D', 'E',]

# Define node positions for better visualization
pos = {'Depot': (0, 0), 'A': (1, 1), 'B': (1, 0), 'C': (1, -1), 'D': (2, 0), 'E': (3, 1)}

# Draw the graph
nx.draw(G, pos, with_labels=True, font_weight='bold', node_size=700, node_color='lightblue', font_size=8, edge_color='gray')

# Add edge labels
labels = nx.get_edge_attributes(G, 'weight')
nx.draw_networkx_edge_labels(G, pos, edge_labels=labels)

# Display the graph
plt.show()

def calculate_path_cost(G, path):
    dist = 0
    time = 0

    for i in range(len(path) - 1):
        if path[i + 1] in G[path[i]]:
            dist += G[path[i]][path[i + 1]]['weight']
            time += G[path[i]][path[i + 1]]['time']
        else:
            return None

    return dist, time

# Find optimal path
min_dist = float('inf')
dist_optimal_path = None

min_time = float("inf")
time_optimal_path = None

print("\nAll Possible Paths:")
for path in permutations(destinations):
    full_path = ('Depot',) + path
    path_cost = calculate_path_cost(G, full_path)
    if path_cost is not None:
        dist, time = path_cost
        print(f"Path: {full_path}, Total Distance: {dist}, Total Time: {time}")

        if dist < min_dist:
            min_dist = dist
            dist_optimal_path = full_path

        if time < min_time:
            min_time = time
            time_optimal_path = full_path

# Print optimal path
print("\nOptimal Path:")
if dist_optimal_path is not None:
    dist_optimal_cost = calculate_path_cost(G, dist_optimal_path)
    total_dist, total_time = dist_optimal_cost
    print(f"Distance Optimal Path: {dist_optimal_path}, Total Distance: {total_dist}, Total Time: {total_time}")
else:
    print("No valid distance optimal path found.")

if time_optimal_path is not None:
    time_optimal_cost = calculate_path_cost(G, time_optimal_path)
    total_dist, total_time = time_optimal_cost
    print(f"Time Optimal Path: {time_optimal_path}, Total Distance: {total_dist}, Total Time: {total_time}")
else:
    print("No valid time optimal path found.")

def plot_optimal_path(G, optimal_path, title):
    pos = {'Depot': (0, 0), 'A': (1, 1), 'B': (1, 0), 'C': (1, -1), 'D': (1.75, 0), 'E': (3, 1)}

    nx.draw(G, pos, with_labels=True, font_weight='bold', node_size=700, node_color='lightblue', font_size=8, edge_color='gray')

    labels = nx.get_edge_attributes(G, 'weight')
    nx.draw_networkx_edge_labels(G, pos, edge_labels=labels)

    optimal_edges = [(optimal_path[i], optimal_path[i + 1]) for i in range(len(optimal_path) - 1)]
    nx.draw_networkx_edges(G, pos, edgelist=optimal_edges, edge_color='red', width=2, alpha=0.7)

    plt.title(title)
    plt.show()
    # Plot distance optimal path
print("\nDistance Optimal Path:")
if dist_optimal_path is not None:
    dist_optimal_cost = calculate_path_cost(G, dist_optimal_path)
    total_dist, total_time = dist_optimal_cost
    print(f"Path: {dist_optimal_path}, Total Distance: {total_dist}, Total Time: {total_time}")
    plot_optimal_path(G, dist_optimal_path, "Distance Optimal Path")
else:
    print("No valid distance optimal path found.")

# Plot time optimal path
print("\nTime Optimal Path:")
if time_optimal_path is not None:
    time_optimal_cost = calculate_path_cost(G, time_optimal_path)
    total_dist, total_time = time_optimal_cost
    print(f"Path: {time_optimal_path}, Total Distance: {total_dist}, Total Time: {total_time}")
    plot_optimal_path(G, time_optimal_path, "Time Optimal Path")
else:
    print("No valid time optimal path found.")